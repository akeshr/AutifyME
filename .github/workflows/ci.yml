name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Check code formatting with Black
      run: |
        uv run black --check --diff src/ tests/
        
    - name: Lint with flake8
      run: |
        uv run flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type checking with mypy
      run: |
        uv run mypy src/
        
    - name: Check import sorting with isort
      run: |
        uv run pip install isort
        uv run isort --check-only --diff src/ tests/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run safety check for vulnerabilities
      run: |
        uv run pip install safety
        uv run safety check
        
    - name: Run bandit security linter
      run: |
        uv run pip install bandit
        uv run bandit -r src/ -f json -o bandit-report.json
        
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run tests with pytest
      run: |
        uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Build package
      run: |
        uv build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: autifyme:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Check for dependency vulnerabilities
      run: |
        uv sync --dev
        uv run pip install pip-audit
        uv run pip-audit --format=json --output=audit-report.json
        
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-audit-report
        path: audit-report.json